&lt;h3 id=&quot;what-is-a-float&quot;&gt;What is a float&lt;/h3&gt;

&lt;p&gt;The basic concept behind a float, and it’s purpose, is found in everyday centuries-old publishing. We are accustomed to looking at a newspaper, or reading a magazine, and seeing pictures with text. Usually, that text is neatly wrapped around an image in some manner that flows with the rest of the page. In some ways this saves space, allowing for more content to be shuffled onto the page. Although it can also make something look more appealing to the eye, and grab your attention. Floats are a result of the need to accomplish this on the internet through HTML. This is the simple idea of why we have floats in CSS. We can use this tool to position and layout our web pages how we see fit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/print-layout_example.png&quot; alt=&quot;Print Layout Example&quot; width=&quot;200px&quot; style=&quot;float: left&quot; /&gt;To the left you can see an example of using floats in everday print. The text is wrapped around the images, hence the term “text-wrap”. By wrapping the images with text, we are integrating them into the pages’ &lt;em&gt;flow&lt;/em&gt;. We wouldn’t want the text of a printed page to just run over the image, that would defeat the purpose of the image right? A lot goes into designing the flow of content, and being able to place an image where the author or page designer wants it is essential.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/web-text-wrap.png&quot; alt=&quot;Web Text Wrap Example&quot; width=&quot;200px&quot; style=&quot;float: right&quot; /&gt;To the right you can see another example of floating images, only this time we have done it for a website. Looks similiar doesn’t it? That’s becuase it is this same idea. We are integrating images into the flow of our page when we &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; them. We could just let our text run over the top of the image, but that would make the image rather useless if it was an integral part of our page content. We could also just let the image sit on it’s own line, which is what HTML would do by default. Maybe this is how your content is designed to &lt;em&gt;flow&lt;/em&gt;. But by using floats as a web developer you at least have much greater control over what you can do. The two images embedded in the content above had the &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; CSS style applied to them.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Above Image Credits: &lt;/strong&gt;&lt;a href=&quot;https://css-tricks.com/almanac/properties/f/float/&quot; target=&quot;_blank&quot; style=&quot;color:black&quot;&gt;Float by CSS-Tricks&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When you float an element it automatically has a few default CSS properties, including &lt;em&gt;display: block&lt;/em&gt;.&lt;/div&gt;

&lt;h3 id=&quot;cool-now-how-can-i-use-this-thing&quot;&gt;Cool, now how can I use this thing?&lt;/h3&gt;

&lt;p&gt;Like above, you can use this thing to wrap text around your images. But what else can it do? How about control the flow of your website’s entire layout? Of course it can! Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; property on your page’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers so you can float them next to each other.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/web-layout_example.png&quot; alt=&quot;Web Layout Example&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Credit: CSS-Tricks&lt;/div&gt;

&lt;p&gt;In the above image you see a simple example where two containers have used &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; to create a nice layout and flow for the page. Let’s write some simple code doing this in action! Paste the code below into an empty HTML file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jlocatis/528084dfb074eed774bbd5e565baf984.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now paste the accompanying CSS code into an empty CSS file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jlocatis/a3b7060a6243d10091c5861b6a85c7f6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here is what you it will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/floats_example.png&quot; alt=&quot;Example CSS floats page&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;clear-it-up&quot;&gt;Clear it up&lt;/h3&gt;

&lt;p&gt;Examine the code, not much too it right? You might notice one piece of code in the HTML where I create an empty container with a class of clear. If you reference the CSS file you will see that I give the class of clear one property, &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt;. To know why this needs to be there requires understanding of what floats actually do to your page’s flow in order to accomplish their goal. When we set the properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; on their respective containers, we allowed them to &lt;em&gt;float&lt;/em&gt; next to each other, but what happens to the rest of the page? Unfortunately closing the floated containers does not end the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; CSS property. When you a declare a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; it breaks the page flow, forcing all proceeding content to conform the the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; rule. If we were just using this on an image, we might not even notice that the page is still trying to build itself around the image after it has already been initally wrapped by text, but it is. In the case of creating page layouts this will become noticeable. Look what happens in the image below. I have removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; from the above CSS code to show you what happens to the bottom container:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/bad_floats_example.png&quot; alt=&quot;Example of not clearing your floats&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the bottom container looks like it is now part of a middle container with the left/right boxes. The HTML code still says otherwise, but the browser is attempting to &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; the bottom container around the right container, since the page is now set to &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; around it. There are a few different tricks to &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; your floats, in the example code I just created an empty container after my floated content and used the property &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt; to reset the page flow back to default. If you wanted, you could just use &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: left&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: right&lt;/code&gt; if you were only looking to clear one of the float properties.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When calling &lt;em&gt;clear: both&lt;/em&gt; on an empty container like I did, the container needs to be a sibling node of the nodes containing the floats that you intend to clear.&lt;/div&gt;

&lt;h3 id=&quot;lets-talk-about-positions&quot;&gt;Let’s talk about positions&lt;/h3&gt;

&lt;p&gt;So now you can use floats to manipulate objects around each other, and even create entire page layouts. But what if you just want to tell something where it should be? This is where we can make use of the CSS property &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Position can have four different values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static: The object is static and follows all of it’s default properties. (Default)&lt;/li&gt;
  &lt;li&gt;Relative: You will now be able to move this object relative to it’s static position.&lt;/li&gt;
  &lt;li&gt;Absolute: Moves the object onto it’s own &lt;em&gt;stack&lt;/em&gt;, or sometimes referred to as a layer. This object now essentially has it’s own flow completely removed from everything else on the page.&lt;/li&gt;
  &lt;li&gt;Fixed: Same as absolute, except the object will be fixed to it’s position on the window. (An absolute object will still scroll with the page, a fixed object will not)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the code example below where I create the two simple boxes:&lt;/p&gt;

&lt;p&gt;HTML:
&lt;script src=&quot;https://gist.github.com/jlocatis/594f7c5b6d3e63cebcf6222a34c46d71.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;CSS:
&lt;script src=&quot;https://gist.github.com/jlocatis/0b54c2826abe022f599f49d1647271c0.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_static.png&quot; alt=&quot;Static Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Static positioned boxes&lt;/div&gt;

&lt;p&gt;Remember, by default both of those &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; boxes have a position of static. But if I set the bottom box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: relative&lt;/code&gt;, I can now move that box in any direction in relation to it’s default position in the HTML flow of the page (in this case, underneath the top box).&lt;/p&gt;

&lt;p&gt;Updated CSS:
&lt;script src=&quot;https://gist.github.com/jlocatis/12f4c38c3263eb9e86dafd30853071d5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_relative.png&quot; alt=&quot;Relative Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Relative positioned boxes&lt;/div&gt;

&lt;p&gt;We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; CSS properties to move the box. In the example I moved the green box &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the top and &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the left of it’s static position.&lt;/p&gt;

&lt;p&gt;Now let’s go ahead and move the green box neatly on top of the blue using &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt;. Here are the changes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/jlocatis/18974491b858000af365ea596e6669cc.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_absolute.png&quot; alt=&quot;Absolute Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Absolute positioned boxes&lt;/div&gt;

&lt;p&gt;Because we set the box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt; it now exists on it’s own stack, with it’s own page flow. So moving the box &lt;code class=&quot;highlighter-rouge&quot;&gt;top: 50px&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;left: 50px&lt;/code&gt; will be in relation to the top corner of the page.&lt;/p&gt;

&lt;h3 id=&quot;nice-now-what&quot;&gt;Nice, now what?!&lt;/h3&gt;

&lt;p&gt;You have a better understanding of how to use the CSS properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Take some time to play around the with the power they offer in web design.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/02/26/explaining-css-floats.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/02/26/explaining-css-floats.html</guid>
      </item>
    
      <item>
        <title>Build Your Own Where's Waldo Game!</title>
        <description>&lt;p&gt;This tutorial will walk you through the steps of creating an interactive Where's Waldo game for the web. You will be able to select you're own Where's Waldo image, and build your program around this image.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/waldo_front.jpg&quot; alt=&quot;My Where's Waldo game&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;My Where's Waldo game&lt;/div&gt;

&lt;h3&gt;Basic Concepts&lt;/h3&gt;

&lt;p&gt;It will store high scores on the server with the player's name for others to see. Most importantly from a programming perspective, the location of Waldo within the image will be stored server-side preventing the player from &quot;cheating&quot;. To break the program down we will need to accomplish the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;These first steps can be accomplished on your own before we get into the nitty-gritty:&lt;/li&gt;
	&lt;li class=&quot;hidden-li&quot;&gt;
		&lt;ul&gt;	
			&lt;li&gt;Search the internet for a Waldo image to use. (And yes you will need to solve it first so you know where Waldo is!)&lt;/li&gt;
			&lt;li&gt;Build this image into a basic HTML page for now. (If you don't know HTML, go check out some tutorials and come back to this later!) Don't worry too much about the CSS styling of the page. Portions of your program may eventually rely on a little bit of CSS so I would reccommend for now just creating an empty stylesheet and integrating that into your HTML page.&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;After the above is done, we can start accomplishing these goals:&lt;/li&gt;
	&lt;li class=&quot;hidden-li&quot;&gt;	
		&lt;ul&gt;
			&lt;li&gt;Build a way for the user's click location within the image to be calculated.&lt;/li&gt;
			&lt;li&gt;Send that information to a server.&lt;/li&gt;
			&lt;li&gt;Once on the server-side, check the click location against Waldo's actual location.&lt;/li&gt;
			&lt;li&gt;Send either true or false back to the client.&lt;/li&gt;
			&lt;li&gt;Either display some sort of message indicating to the user they haven't found Waldo yet, or end the game if true is returned.&lt;/li&gt;
			&lt;li&gt;If true, tell the user they're successful.&lt;/li&gt;
			&lt;li&gt;Add a live timer to the page so we can provide a little pressure to the user, and give them a score at the end.&lt;/li&gt;
			&lt;li&gt;Build a way for these timed scores to be stored in a high scores list on the server.&lt;/li&gt;
			&lt;li&gt;Add the high scores list functionality to the game (including allowing the user to save their name with their score).&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;/ul&gt;

&lt;p&gt;Sounds easy enough right!? Let's get started...&lt;/p&gt;

&lt;p&gt;First let's go to your HTML page containing your Waldo image. We need a way to get x and y's pixel variables of the user's click location. We will compare these numbers to the real location of Waldo (which you should be aware of). First let's find Waldo's pixel coordinates within your image. If you haven't already, I suggest you use HTML to set a fixed width for your image, especially if the image is larger than your typical screen at full size. You want to make sure the image fits nicely in a window for the user to see, and also that it's size will be the same across different browser/computer setups. After this is done we will use the JavaScript console of your browser to find Waldo's coordinate range.&lt;/p&gt;

&lt;p&gt;In your code editor create a new JavaScript file. We will be using JavaScript for programming this portion of the game. Now let's create a function that will tell us the click location of our mouse within the image. This can be done with the code below:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/76216c782c036f43f563a6a87fcfcf71.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We will be using JavaScript's &lt;em&gt;window.event&lt;/em&gt; method which will give us all sorts of information about the state of the page as the event happens. But wait, what is the event? We also need to add an event listener to our JavaScript that will &quot;listen&quot; for when the click occurs, and execute the code in our &lt;em&gt;findClickLocation&lt;/em&gt; function when it happens. Make some room at the top of your JS file and add the following code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/e8604b054f8227cb463ea5825b07361a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In order for the above event listener to work, you will need to return to your HTML page and give your Waldo image the class name &quot;Waldo&quot; (please see HTML tutorials on how this can be accomplished). The above JS code will add the event listener when our &lt;em&gt;window&lt;/em&gt;, or page, loads. Just one last step we need in order to find Waldo's coordinates. Add a &lt;em&gt;debugger;&lt;/em&gt; to the end of your findClickLocation function. The debugger will let us use your browser's JavaScript console to see where we are clicking. Everytime the browser reaches the debugger line (which will be on every click), it will halt the execution of the program and allow you to interact with it's current state.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/JS_console.jpg&quot; alt=&quot;Accessing the JavaScript console&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Accessing the JavaScript console&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/click_event.jpg&quot; alt=&quot;Looking at a click event in the console&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Click event in the console&lt;/div&gt;

&lt;p&gt;The first image above shows me opening my JavaScript console. The second image shows me clicking on my waldo image with a debugger in place, and exploring what is returned in &lt;em&gt;window.event&lt;/em&gt;. In the above example I am using Google Chrome, but your browser of choice will have something similiar. Feel free to type &quot;click_event&quot; into your console, and see the output of everything &lt;em&gt;window.event&lt;/em&gt; gives you. All we need is the &lt;em&gt;offsetX&lt;/em&gt; and &lt;em&gt;offsetY&lt;/em&gt; position of the click. These are the location of the mouse within the event target (in this case the Waldo image).&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/x_and_y.jpg&quot; alt=&quot;Example location of x and y&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;X and Y in the console&lt;/div&gt;

&lt;p&gt;Click around and write down the range Waldo exists within. We will need this a bit later. For now let's focus on getting the click location of &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; to a server. For this piece of the project we will be coding in Ruby on the server-side, and will be using the Sinatra framework. If you aren't sure how the Sinatra framework handles things, please read over the beginnings of &lt;a href=&quot;http://www.sinatrarb.com/intro.html&quot; target=&quot;blank&quot;&gt;this README&lt;/a&gt; to familiarize yourself. You will only need to understand the basics of a Ruby web framework in order to proceed. Create your controller action file first. Start it out with this code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/aa2f62428ed6d2e6ab759b15e81e52e8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The above code will get the routes you need to finish the next few steps of our program. Return to your JS script file and let's write a function that will take our &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; coordinates and send them to the Ruby route '/return' we just created. Create a function named &lt;em&gt;getData&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/3d598727bfcbccd37bb8a6d431bc94c9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For now we just want to make sure it works, so I have included &lt;em&gt;console.log&lt;/em&gt; statements within our true/false test that will just print &quot;true&quot; or &quot;false&quot; to your JS console. You're probably wondering what some of that code is. Here I am introducing AJAX (Asynchronous JavaScript and XML). Using AJAX, we can communicate easily between our client side code and our server side code. Examine the above code and see if you can guess what it is doing. It creates a new &lt;em&gt;XMLHttpRequest&lt;/em&gt;, and sends our &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; variables as parameters to the server where we can use them in our Ruby code. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; target=&quot;blank&quot;&gt;Here&lt;/a&gt; is some good entry level reading on the details of AJAX if interested, but it is important to understand that it is basically designed to do two things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Make requests to the server without reloading the page&lt;/li&gt;
	&lt;li&gt;Receive and work with data from the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back in the Ruby route for '/return' we need to create our function &lt;em&gt;waldoTest&lt;/em&gt; to check and see if the user clicked on Waldo or not. If you haven't done so already, make a ruby file to hold your functions. Let's add the code to check if waldo exists:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/36aa6975ecb35fc3f872ca0f8cf9679b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This will return true or false based on your provided coordinates. Notice back on the controller page that we set this variable to a string before returning it at the end of the route. Any variable returned at the end of your Ruby route is what the JavaScript AJAX request will receive. A JavaScript boolean object is different from a Ruby boolean object, so we will instead use a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point test your program. It should be working. True or false should be returned to your JS console based on your click. If you have that working, let's make this thing a little more functional!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This next step is somewhat more open-ended. If you would like to let the user know that their click was unsuccessful, there are several creative ways you can do it. I just added an extra line in my HTML essentially saying &quot;wrong location&quot;, and used some JavaScript and CSS magic to display it for a few seconds if false is returned. What about true? In my HTML I built a reusable hidden modal window (this way I can re-use it for both the end game message and high scores). If true is returned, this window is displayed. Get creative with your HTML/CSS skills and see what you can come up with! Here is my updated &lt;em&gt;getData&lt;/em&gt; function replacing our console.log statements with working code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/cc8be8b6d19ab8a71a2d510e1c767a4a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You might notice some code in the above function referring to a timer. Let's add some fun to your game by making a live timer on the screen that starts counting the instant the user loads the page. We can also use these times as a means of tracking high scores. There are several ways a timer in JavaScript can be accomplished. For this program I built a custom timer, that updates a string formatted like a clock (&quot;minutes:seconds&quot;) every second:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/c1258b40bc6b9d6a5c602bc5d70d18a7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;My approach will create a bigger challenge later on when we go to sort our scores based on time (since we aren't actually storing time, but a string of time). But it does, in my opinion, look nicer to the user. &lt;/p&gt;

&lt;p&gt;So the timer code was already added to my &lt;em&gt;getData&lt;/em&gt; function above, now let's build a function that will store those scores on the server. You may have already noticed in my &lt;em&gt;getData&lt;/em&gt; function I call a new function named &lt;em&gt;storeScores&lt;/em&gt; that will run if a player wins and chooses to submit their score. We will need to create another AJAX request to send this information back to the server. Here goes:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/b29e52182f65ac43ee9a4849924a1648.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;While we are at it, let's also create a way to pull back those scores from the server for display. Create a link somewhere in your HTML and add an event listener in your JavaScript. Here is the code creating another AJAX request getting our scores:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/6b88bd2d8b50d739b750876b7b18febd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Let's add some routes to our ruby controller to make this all work:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/428e6dc0062f43fe74cf3b947b561d2c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In our '/storescores' route we send the data to a function called &lt;em&gt;storeScore&lt;/em&gt;. Let's write it:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/8957eba8a7a4084ac454fb49bc27a70f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We are writing the scores to a .csv file (in the above example, called 'highscores.csv') that will be stored on the server. Now what if someone wants to see the high scores? Let's make the '/showscores' route a reality. Depending on how you chose to track time you could be doing something completely different. But that's the fun in programming, solving unique problems in different ways! My function is a little more complicated because it needs to break our clock string down into seconds, sort the scores by seconds, and restore the time back to it's clock format. It's a fun algorithmic excercise to rack your brain on! Here is the code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/1d3714de0a2d552d1efa55c2d3968b3c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;One last bonus that happened in the code above but I didn't explain was adding a name to the high scores. Before anything in JS or Ruby can accomplish this, you need to get some sort of input method integrated into your HTML. If you look above you can see I grab the user's name and send it with the score in the &lt;em&gt;storeScores&lt;/em&gt; JavaScript function. The &lt;em&gt;storeScore&lt;/em&gt; Ruby function than writes the name and corresponding time to the .csv file. The &lt;em&gt;loadScores&lt;/em&gt; function will sort the names as it sorts the times.&lt;/p&gt;

&lt;p&gt;I hope this tutorial was informative and fun! Spend sometime after you get the game working styling it up through HTML and CSS. For added difficulty you can add multiple Waldo pictures to your challenge. Enjoy!&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/02/24/build-wheres-waldo.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/02/24/build-wheres-waldo.html</guid>
      </item>
    
  </channel>
</rss>