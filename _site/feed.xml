<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jamie Locatis, Web Developer</title>
    <description>The adventures of a software (mostly web) developer! Posting ideas relating to C#, .NET, and a bunch of other random stuff.
</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Setting up Administrate in Rails</title>
        <description>&lt;p&gt;Flexible and powerful admin dashboards for any Ruby on Rails application! The Administrate gem is an easy to setup framework for giving your application some much needed robust administration capabilities.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/administrate/administrate_installed.png&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;h3 id=&quot;get-rails-started&quot;&gt;Get Rails Started&lt;/h3&gt;

&lt;p&gt;If you already know how to put together a basic Rails application, skip this part. Otherwise, consider this a &lt;em&gt;quick&lt;/em&gt; tutorial on setting Rails up. I’m going to just throw a bunch of code out here. I suggest reading up on Rails in this &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html&quot; target=&quot;_blank&quot;&gt;great starter tutorial&lt;/a&gt; for greater detail about what you’re doing.&lt;/p&gt;

&lt;p&gt;Make sure you have Rails installed. At your command line type the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install rails&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new admin_test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Above we installed Rails, and created a new Rails application in the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;admin_test&lt;/code&gt;, which should now be inside of whatever directory you were at in your command line. Rails will scaffold a lot of files into that directory. For testing out Administrate let’s create a quick User model to play with. Move into your new directory and type this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate model User username:string password:string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above will create all of the new files associated with the User model, and also create a database migration to create a Users table with the columns username and password. Run the following next:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake db:migrate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That will run the database migration that was created as part of the model. Again for more detail on all of the above terminology, please see some basic Rails tutorials!&lt;/p&gt;

&lt;h3 id=&quot;lets-administrate&quot;&gt;Let’s Administrate&lt;/h3&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/administrate/Gemfile_unedited.png&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Unedited Gemfile&lt;/div&gt;

&lt;p&gt;First add the Administrate gem to your Rail application’s Gemfile (should be located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;admin_test&lt;/code&gt; root directory). Your Gemfile should now look like the one below.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/administrate/Gemfile_edited.png&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Edited Gemfile&lt;/div&gt;

&lt;p&gt;Go back to your terminal and run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will look through your Gemfile and check to ensure everything you have required is installed. At this point you should see Administrate installed within all of the commands bundle ran. Next we need to actually install administrate for use within our app. Go ahead and type this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate administrate:install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That will setup your initial Administrate dashboards with default settings. Go ahead and run your Rails server using:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With your Rails server running successfully, point your browser to http://localhost:3000/admin (3000 is the Rails’ default local port) and you should see a basic Administrate dashboard for the User model like below!&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/administrate/administrate_dashboard.png&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Sample Administrate Dashboard&lt;/div&gt;

&lt;p&gt;That’s it! You can now add Users to your Users table using Administrate. Along with the power of Ruby on Rails, you can now build a strong administration interface for any web application. Check out the &lt;a href=&quot;https://github.com/thoughtbot/administrate&quot; target=&quot;_blank&quot;&gt;offical Administrate GitHub repo&lt;/a&gt; to get started with more!&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/04/15/rails-administrate.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/04/15/rails-administrate.html</guid>
      </item>
    
      <item>
        <title>Switching to a Jekyll Blog</title>
        <description>&lt;p&gt;Shape up your online presence with ease! Move your existing online blog (or create a new one) to Jekyll. The framework that powers this very site you are reading is a great platform for any developer.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/jekyll/logo.png&quot; alt=&quot;Facepalm&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Ajay Karwal wrote a wonderful article on &lt;a href=&quot;zhttps://dev.to/ajaykarwal/switching-from-a-cms-to-jekyll&quot; target=&quot;_blank&quot;&gt;Switching from a CMS to Jekyll&lt;/a&gt; powered blog. Check it out! There can be a sharp learning curve, especially if you are new to software development. But once you have it up and running keeping your site updated with new content is an absolute breeze!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/04/11/jekyll-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/04/11/jekyll-blog.html</guid>
      </item>
    
      <item>
        <title>Hello World From React</title>
        <description>&lt;p&gt;Learn how to build a simple Hello World app in React!&lt;/p&gt;

&lt;p&gt;If you haven’t already make sure you read &lt;a href=&quot;/2017/03/31/react-setup-part1.html&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2017/04/05/react-setup-part2.html&quot;&gt;Part II&lt;/a&gt; of my Setting Up a React Dev Environment tutorials. If you have everything setup and ready to go let’s dive in!&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/preview_images/reactjshw.jpg&quot; alt=&quot;ReactJS Logo&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-do-this&quot;&gt;Let’s do this&lt;/h3&gt;

&lt;p&gt;In your root directory containing your new React program, create a new file &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. This should be a simple page, give it a title if you want. The only thing it really needs for this is one &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. You don’t even have to put anything inside of it! Do give it an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;. Your page should look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World from React!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Our empty div! React will work it's magic here. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next make an empty file named &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;. Inside of that dump the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Import React into your app.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Import the React DOM into your app.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// React is designed to a modular way of creating JavaScript based websites. Below we create a class called Hello World, which will render our Hello World HTML code. The code below is a mix of JavaScript and JSX.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Notice below the JSX syntax on the break HTML tag. All tags in JSX must be closed!&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&amp;lt;br /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// I'm sure you're wondering what this.props.name is. Read on for an explanation!&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the React DOM to render our HelloWorld component to the DOM on our app div we created.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jamie&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you followed the instructions from the previous two tutorials, everything should be ready to work! Remember in our file &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; we defined our entry JavaScript file as &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; in our directory’s root folder, and our HTML template was also defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in the root folder. If you wanted these to be located in different places you would simply need to go back to the Webpack config file and change these locations. At this point you should be able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt; at your command line to start the server and see Hello World in action!&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Webpack's default location is localhost:8080. This means it runs on port 8080 of your computer when running the server.&lt;/div&gt;

&lt;h3 id=&quot;howd-that-work&quot;&gt;How’d that work?&lt;/h3&gt;

&lt;p&gt;Let’s walk through the React code and breakdown what happened. The first two lines (as noted in the comments) are required to import the React and ReactDOM libraries into your file. As you build bigger apps that span multiple files, you will be requiring these imports in every file (well at least React, you won’t need ReactDOM except for anywhere you are actually writing something to the DOM).&lt;/p&gt;

&lt;p&gt;Next we use &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createClass&lt;/code&gt; on a variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt;. This is creating a React class, or more often referred to as a component, named HelloWorld! Inside of this component we write an anonymous render function that returns some JSX. Doesn’t it like look HTML? Why yes, it does! JSX is mostly HTML in JavaScript, making the writing of components like these a breeze. I did mention in the comments that I would explain what &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this.props.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is doing…&lt;/p&gt;

&lt;p&gt;Notice at the bottom of our React code where we actually call the ReactDOM to render our HelloWorld component. I wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;HelloWorld name=&quot;Jamie&quot; /&amp;gt;&lt;/code&gt;, instead we could have just called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;HelloWorld /&amp;gt;&lt;/code&gt; and that would have still done everything contained inside of the HelloWorld component. But where &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this.props.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; is, it would be blank! A prop is an item you can pass into a React component. This makes these components super modular and very scalable, as you can reuse them over and over again as you pass in different prop objects (or props, it can get confusing I know!). Change where I send name in as a prop with HelloWorld to your own name.&lt;/p&gt;

&lt;p&gt;The last line does almost exactly what it reads like, it calls on ReactDOM to render an object to something in the DOM. ReactDOM will always take two parameters, the first is your React component you are passing in, the second is where it needs to connect it. In the case above we connect it to the single &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; we created in our HTML page. Imagine chaining lots of these React components together for one simple ReactDOM render! That’s the magic of React.&lt;/p&gt;

&lt;p&gt;Above I mentioned how our HelloWorld component was moduler and reusable. It is important when desigining React apps to break down the objects within your site in this way. This article on the official Facebook docs on React, &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot; target=&quot;_blank&quot;&gt;Thinking in React&lt;/a&gt;, is a great entry into the idea of what React should be used for.&lt;/p&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;

&lt;p&gt;You’ve just built a simple Hello World toy application in React from the ground up! Exciting right!? Go back and read &lt;a href=&quot;/2017/03/31/react-setup-part1.html&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2017/04/05/react-setup-part2.html&quot;&gt;Part II&lt;/a&gt; of my React tutorials if you haven’t already!&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/04/07/react-hello-world.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/04/07/react-hello-world.html</guid>
      </item>
    
      <item>
        <title>Setting Up A React Dev Environment, Part II</title>
        <description>&lt;p&gt;In this tutorial I will cover getting your React site up and running from a server so you can begin serving your react code to a browser. I will also give you the tools you need to finish creating the near &lt;em&gt;perfect&lt;/em&gt; dev environment for your React apps.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/preview_images/reactjspt2.jpg&quot; alt=&quot;ReactJS Logo&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;If you haven’t been through &lt;a href=&quot;/2017/03/31/react-setup-part1.html&quot;&gt;Part I of Setting Up A React Dev Enivronment&lt;/a&gt;, do so before proceeding! Otherwise, let’s dive in…&lt;/p&gt;

&lt;h3 id=&quot;configure-babel&quot;&gt;Configure Babel&lt;/h3&gt;

&lt;p&gt;You should already have Babel installed inside of your app’s directory. In the root of the directory, create a new file and save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;. This file will configure Babel to work across your app. Remember that Babel will be compiling our JSX code into JavaScript, a core component of React. Save the following code in &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;configure-webpack&quot;&gt;Configure Webpack&lt;/h3&gt;

&lt;p&gt;Next we need to configure Webpack. Webpack will actually be bundling all of our app’s code together, and doing the final build on the transformed HTML and JavaScript files the browser will ultimately be served. But Webpack needs to know how it should be doing this, so let’s create a configuration file. In your project’s root directly, create a new file and save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;. Go ahead and insert this code first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/index.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'transformed.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/build'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The entry line will be our &lt;em&gt;entry&lt;/em&gt; file that will serve our app. React is mostly designed to work with SPA’s (Single Page Applications), which is why in the case above all of our React and JavaScript will be funnelled through one file, &lt;code class=&quot;highlighter-rouge&quot;&gt;/index.js&lt;/code&gt; above. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname&lt;/code&gt; is a method of Node.js, which will set the root directory before the &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the bottom we add &lt;code class=&quot;highlighter-rouge&quot;&gt;loaders&lt;/code&gt;. This is where we tell Webpack what files to use as it builds our site. You can have multiple loaders but for a simple application you will only need one. Each loader should have a &lt;code class=&quot;highlighter-rouge&quot;&gt;test:&lt;/code&gt;, where we tell Webpack what actual files to load. In the test above we use a regular expression to indicate that we want all JavaScript files to be loaded. After &lt;code class=&quot;highlighter-rouge&quot;&gt;test:&lt;/code&gt; we set what files to &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude:&lt;/code&gt;. We told Webpack first to take all JavaScript files, but that would include everything that was setup in your &lt;code class=&quot;highlighter-rouge&quot;&gt;/node_modules&lt;/code&gt; directory when we initially set the app up. We don’t want that! Lastly we tell Webpack which &lt;code class=&quot;highlighter-rouge&quot;&gt;loader:&lt;/code&gt; to use, which should be Babel since it will actually be reading through our React code. So to recap our loader:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We want to include all .js files we will be writing.&lt;/li&gt;
  &lt;li&gt;We want to exclude any .js files that came with Node.js, React, React-DOM, etc…&lt;/li&gt;
  &lt;li&gt;We want to run our .js files through Babel to translate JSX into JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So where does Webpack put all of this? Why the &lt;code class=&quot;highlighter-rouge&quot;&gt;output:&lt;/code&gt; of course! This should always have two properties, &lt;code class=&quot;highlighter-rouge&quot;&gt;filename:&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;path:&lt;/code&gt;. And you guessed it, the name of our transformed file will be &lt;code class=&quot;highlighter-rouge&quot;&gt;filename:&lt;/code&gt;, and it will save that file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;path:&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3 id=&quot;one-more-thing-with-webpack&quot;&gt;One more thing with Webpack&lt;/h3&gt;

&lt;p&gt;Almost done getting it setup. We need to configure Webpack’s HTMLWebpackPlugin. As we are developing our files will be located where they need to be. But when we build these files for deployment using the Webpack settings above, it will only be building the &lt;code class=&quot;highlighter-rouge&quot;&gt;transformed.js&lt;/code&gt; file. Can’t get to that without some good old HTML. Using the HTMLWebpackPlugin will build the accompanying HTML with our new .js file. Add this to the top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'html-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLWebpackPluginConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/index.html'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we go to deploy our app, this will build an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; based on our development version, and will automatically add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag with our &lt;code class=&quot;highlighter-rouge&quot;&gt;transformed.js&lt;/code&gt; file. In a dev environment we won’t need to be building these files, just for deployment.&lt;/p&gt;

&lt;p&gt;One last piece to make this work. Inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; after your loaders add:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTMLWebpackPluginConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure you add a comma after your loaders!&lt;/p&gt;

&lt;h3 id=&quot;setup-command-line-scripts&quot;&gt;Setup command line scripts&lt;/h3&gt;

&lt;p&gt;The hardest part is &lt;em&gt;almost&lt;/em&gt; over. We need to setup scripts so we have a way to run our app from the command line. In the root directory you should have a file name &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, open it. Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;:&lt;/code&gt; and replace anything inside of it with the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt; to run your app in development mode. You will be doing this most of the time as you are coding. It will start a server at a specific port (Webpack usually runs on port 8080) where you can view your page! Another nice perk of Webpack is that it will refresh everytime you save a file, no need to refresh the page or restart the server. When you want to deploy your app, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and your HTML and JavaScript files will be built for deployment without the need for a server!&lt;/p&gt;

&lt;h3 id=&quot;get-babel-transform-in-your-code-editor-sublime-text&quot;&gt;Get Babel Transform in your code editor (Sublime Text)&lt;/h3&gt;

&lt;p&gt;Depending on what code editor you are using, it may or may not understand what JSX is as you’re writing it. If you’re like me you enjoy the extra readability of code this adds when your editor colors things for you. Personally I’m coding in Sublime Text, and it does not have a built-in understanding of JSX as of this writing. You will need to install the Babel Transform package to make this work. See &lt;a href=&quot;http://stackoverflow.com/questions/13124532/installing-packages-in-sublime-text-2&quot; target=&quot;_blank&quot;&gt;this Stack Overflow&lt;/a&gt; if you are unsure how to go about installing Sublime Text packages.&lt;/p&gt;

&lt;h3 id=&quot;ready-to-go&quot;&gt;Ready to go!&lt;/h3&gt;

&lt;p&gt;You should be ready to begin coding in React. In the &lt;a href=&quot;/2017/04/07/react-hello-world.html&quot;&gt;next tutorial&lt;/a&gt; we will create a simple Hello World app using React!&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/04/05/react-setup-part2.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/04/05/react-setup-part2.html</guid>
      </item>
    
      <item>
        <title>Comments Should Be Good</title>
        <description>&lt;p&gt;The idea of having good comments in code has come up almost daily in my coding adventure. But I’m here to tell you a truth, all of us who were talking about good comments have yet to write consistently good comments! Let’s examine what &lt;em&gt;makes&lt;/em&gt; a comment &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I stumbled across &lt;a href=&quot;https://dev.to/andreasklinger/comments-explain-why-not-what-and-2-more-rules-on-writing-good-comments&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; article by Andreas Klinger on the idea of good comments. The article’s title says it all! &lt;em&gt;Good comments explain WHY, not WHAT, and 3 more rules on writing good comments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s a simple idea, code should explain WHAT is happening while comments should explain WHY the code is happening. It’s a good read! Here’s to actually practicing what I’m preaching…&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/04/02/good-comments-are-good.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/04/02/good-comments-are-good.html</guid>
      </item>
    
      <item>
        <title>Setting Up A React Dev Environment, Part I</title>
        <description>&lt;p&gt;This quick setup tutorial will get you started on everything you need to begin coding with ReactJS! After just a few steps you will be ready to begin coding in this newer declarative, component-based JavaScript library.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/preview_images/reactjspt1.jpg&quot; alt=&quot;ReactJS Logo&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2017/04/05/react-setup-part2.html&quot;&gt;Visit Part II of this tutorial!&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;You will need to have Homebrew, Node.js, and npm installed on your computer before proceeding. Ensure that your installation of Node.js is up to date and includes npm (Node Package Manager). The newest versions of Node.js should already include npm. Visit the Homebrew site &lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; to get it up and running first. Next install Node.js via your Homebrew package manager using the following line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you aren't on macOS and can't use Homebrew, &lt;a href=&quot;http://scoop.sh/&quot; target=&quot;_blank&quot;&gt;Scoop&lt;/a&gt; is a similiar command-line installer for Windows. Head &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot; tager=&quot;_blank&quot;&gt;here&lt;/a&gt; for a list of various package maanger install commands for Node.js.&lt;/div&gt;

&lt;h3 id=&quot;getting-your-template-setup&quot;&gt;Getting your template setup&lt;/h3&gt;

&lt;p&gt;Let’s get everything installed and running in a new directory so you can begin coding in React! Create a new empty directory, and in your terminal type the following in order: (and make sure you are in your new empty directory!)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After entering this first command you will be prompted with a bunch of questions, just hit enter for all of them. As you learn more about React and Node you will use these prompts, but nothing needs to change to get a basic dev environment up and running.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -S react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -S react-dom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D babel-core babel-loader babel-preset-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D webpack webpack-dev-server html-webpack-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whoa, that was a lot right? For starters I abbreviated a few things in those commands. Where you see &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt; I am shortening &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;. I do the same with &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; which is short for &lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt;. The other we used was &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt;. This flag is short for &lt;code class=&quot;highlighter-rouge&quot;&gt;--save-dev&lt;/code&gt; and saves an npm module for development version only.&lt;/p&gt;

&lt;p&gt;We installed a lot, including React and the React-DOM! We also installed Babel, a next generation JavaScript compiler that will convert your React JSX syntax to regular JavaScript. JSX is a XML-like syntax extension for ES6, the latest version of JavaScript. I know there a lot of new terms being thrown out here, but we installed one more thing. Webpack will act as your server for the React code you will write. It bundles application source code in convenient chunks and loads that code from a server into a broswer.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/reactjspt1/reactjs.png&quot; alt=&quot;ReactJS Logo&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Whew! Take some time to go over what just happened above. Your directory should now be full of files and folders. In &lt;a href=&quot;/2017/04/05/react-setup-part2.html&quot;&gt;Part II&lt;/a&gt; of Setting Up a React Dev Environment we will finish getting everything ready to go for your React app!&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/03/31/react-setup-part1.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/03/31/react-setup-part1.html</guid>
      </item>
    
      <item>
        <title>Master the Art of Git</title>
        <description>&lt;p&gt;Using Git can be the easiest yet most frustrating part of becoming a developer. It’s as simple as a quick tutorial to get into, yet I promise it will take a long time to perfect. But Git is a &lt;em&gt;need to know&lt;/em&gt; for every coder. Check out this great tutorial that breaks down mastering the art of Git.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/how-to-master-the-art-of-git-68e1050f3147&quot; target=&quot;_blank&quot;&gt;How to master the art of Git by Adnan Rahić&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;make-it-a-habit&quot;&gt;Make it a habit!&lt;/h3&gt;

&lt;p&gt;Adnan offers some simple TLDR; steps for learning Git through habit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; all the time!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try only to change files you really want to change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A&lt;/code&gt; is your friend.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note from me:&lt;/strong&gt; Seriously it is! I've gotten in a nasty habit of just doing `git add .`, adding all of my files to a commit everytime instead of just the specific one I'm changing. This can create waves of issues if you are editing multiple files at the same time!&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Feel free to &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;meaningful messages&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Another note from me:&lt;/strong&gt; Again, seriously, meaningful messages! It's easy to just write whatever (literally, I find myself writing `whatever` a lot) to get the commit saved. But that won't help down the line when you need to remember what you've just screwed up ;)&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; doing any pushing, but &lt;em&gt;after&lt;/em&gt; you have committed any changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; the committed changes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Credit:&lt;/em&gt; &lt;a href=&quot;https://hackernoon.com/how-to-master-the-art-of-git-68e1050f3147&quot; target=&quot;_blank&quot;&gt;How to master the art of Git by Adnan Rahić&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/03/31/master-git.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/03/31/master-git.html</guid>
      </item>
    
      <item>
        <title>Easy Blog Setup Using React</title>
        <description>&lt;p&gt;I found this easy tutorial that brings together a few different technologies to create a quick SEO-friendly, CMS-powered blog. Take a look at what’s involved and read the tutorial!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/rogerjin12/how-to-build-a-seo-friendly-react-blog-with-an-api-based-cms&quot; target=&quot;_blank&quot;&gt;Roger Jin’s tutorial “How to build a SEO-friendly React blog with an API-based CMS” on dev.to&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tech-involved&quot;&gt;Tech involved&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;React - Declarative, efficient, and flexible JavaScript library for building impactful user interfaces&lt;/li&gt;
  &lt;li&gt;Next.js - Minimalistic framework for server-rendered React apps&lt;/li&gt;
  &lt;li&gt;ButterCMS - A hosted API similiar to WordPress with different language support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-it-does&quot;&gt;What it does&lt;/h3&gt;

&lt;p&gt;Build a blog interface with React and use Roger’s tutorial to quickly wrap a  framework around it! Roger’s tutorial pointed me in the direction of Next.js, an easy way to serve your React apps (removing the steps of grabbing and setting up a webpack server on your own, which Next.js uses and does for you). Next.js also includes everything you need to use Babel (important in React to translate your JSX to plain JS). Lastly his tutorial introduced me to ButterCMS, which can initally be used for free. You can manage your blog content through a nice WordPress-style web API, and serve it to your website through the language of your choice!&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/03/27/react-blog.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/03/27/react-blog.html</guid>
      </item>
    
      <item>
        <title>Star Wars Opening Crawl in CSS</title>
        <description>&lt;p&gt;How about something cool and completely useful on every website? Let’s build a Star Wars opening crawl entirely using CSS. No JavaScript required!&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/swcss/crawl_example.jpg&quot; alt=&quot;Star Wars Crawl&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;It’s quite simple really. First build a basic HTML page containing two &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers for our crawl content.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Star Wars Quiz :D&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./css/scrolling.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/css?family=News+Cycle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crawl_box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_episode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Episode #&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;EPISODE TITLE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Paragraph 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Paragraph 2...etc...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The outer &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl_box&lt;/code&gt; will contain most of the wizardry required to make this work! The inner &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; will contain the engaging words you wish to share with the world. For the crawling text I simply used &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags to get the spacing needed in between your paragraphs. I did use two different &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers to get the crawl episode number and title looking as close as (I think) possible to the real thing.&lt;/p&gt;

&lt;p&gt;Now for some movie making magic! Let’s use CSS to set how we want our &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; of the page to look. I grabbed a generic star background image off Google Images (yes I know it is NOT the exact Star Wars background image). You can choose any background that suits you best, but I would make sure to go with a higher resolution image. That way it holds up well with your great looking crawl. Here is a &lt;a href=&quot;/assets/images/swcss/star_background.jpg&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt; to the one I used. Also (after extensive research) I decided the font ‘News Cycle’ comes fairly close to the original crawl font. But play around and find one that suits you best!&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; ‘News Cycle’ is available free from Google Fonts. Just use the CSS stylesheet link in your page’s head to include the use of the font throughout your page! &lt;a href=&quot;https://fonts.google.com/specimen/News+Cycle&quot; target=&quot;_blank&quot; style=&quot;color:black&quot;&gt;Link&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The next bit of CSS will animate our crawl using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes&lt;/code&gt; rule. Read more about how that works &lt;a href=&quot;https://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'News Cycle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&quot;../images/star_background.jpg&quot;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* This will create the 'crawl' animation using the @keyframes rule. The animation
is defined below */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-170%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we set the CSS for our two containers &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl_box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#crawl_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Transforms the text perspective to look 3D */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Positions the crawl on the page and sets the font
   to closely match the actual Star Wars crawl. */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-9em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;350%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;justify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Creates the 'crawl' animation we call in @keyframes */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-origin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; in order to create the 3D perspective of the text. Combined with the animation we build (called &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl&lt;/code&gt;, which is than called in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes&lt;/code&gt; rule from above), we create the 3D illusion of the text moving through space away from you. If you need to change the timing of the crawl to more closely match your text, simply edit the time (second property) of &lt;code class=&quot;highlighter-rouge&quot;&gt;animation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, here is the quick CSS I created for centering and styling the episode title and name. You don’t &lt;em&gt;have&lt;/em&gt; to include this, any good film buff would know that Star Wars was originally released in 1977 without an episode number or title in the opening crawl.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Fun Fact:&lt;/strong&gt; The title ‘Episode IV: A New Hope’ was added in 1980 when The Empire Strikes Back was released as Episode V.&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#center_episode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#center_title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.75em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it! Have fun with it. Put it on every website you make, together let’s make the internet great again! Star Wars crawls everywhere!&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/03/17/starwars-crawl-css.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/03/17/starwars-crawl-css.html</guid>
      </item>
    
      <item>
        <title>Explaining CSS Floats and Positions</title>
        <description>&lt;p&gt;Let’s talk about floats and positions. Often a headache for beginning web developers, taking a moment to understand how they work can make a huge difference. Floats and positions can be used for many things, from applying text wrap to an image, to controlling the &lt;em&gt;flow&lt;/em&gt; of your content, to building a well structered page layout. A basic understanding of how these work is necessary to becoming a solid web developer.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-float&quot;&gt;What is a float&lt;/h3&gt;

&lt;p&gt;The basic concept behind a float, and it’s purpose, is found in everyday centuries-old publishing. We are accustomed to looking at a newspaper, or reading a magazine, and seeing pictures with text. Usually, that text is neatly wrapped around an image in some manner that flows with the rest of the page. In some ways this saves space, allowing for more content to be shuffled onto the page. Although it can also make something look more appealing to the eye, and grab your attention. Floats are a result of the need to accomplish this on the internet through HTML. This is the simple idea of why we have floats in CSS. We can use this tool to position and layout our web pages how we see fit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/print-layout_example.png&quot; alt=&quot;Print Layout Example&quot; width=&quot;200px&quot; style=&quot;float: left&quot; /&gt;To the left you can see an example of using floats in everday print. The text is wrapped around the images, hence the term “text-wrap”. By wrapping the images with text, we are integrating them into the pages’ &lt;em&gt;flow&lt;/em&gt;. We wouldn’t want the text of a printed page to just run over the image, that would defeat the purpose of the image right? A lot goes into designing the flow of content, and being able to place an image where the author or page designer wants it is essential.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/web-text-wrap.png&quot; alt=&quot;Web Text Wrap Example&quot; width=&quot;200px&quot; style=&quot;float: right&quot; /&gt;To the right you can see another example of floating images, only this time we have done it for a website. Looks similiar doesn’t it? That’s becuase it is this same idea. We are integrating images into the flow of our page when we &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; them. We could just let our text run over the top of the image, but that would make the image rather useless if it was an integral part of our page content. We could also just let the image sit on it’s own line, which is what HTML would do by default. Maybe this is how your content is designed to &lt;em&gt;flow&lt;/em&gt;. But by using floats as a web developer you at least have much greater control over what you can do. The two images embedded in the content above had the &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; CSS style applied to them.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When you float an element it automatically has a few default CSS properties, including &lt;em&gt;display: block&lt;/em&gt;.&lt;/div&gt;

&lt;h3 id=&quot;cool-now-how-can-i-use-this-thing&quot;&gt;Cool, now how can I use this thing?&lt;/h3&gt;

&lt;p&gt;Like above, you can use this thing to wrap text around your images. But what else can it do? How about control the flow of your website’s entire layout? Of course it can! Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; property on your page’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers so you can float them next to each other.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/web-layout_example.png&quot; alt=&quot;Web Layout Example&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;In the above image you see a simple example where two containers have used &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; to create a nice layout and flow for the page. Let’s write some simple code doing this in action! Paste the code below into an empty HTML file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float_sample.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example CSS floats page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm the top box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm a left box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm a right box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm the bottom!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now paste the accompanying CSS code into an empty CSS file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.top&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;74%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.bottom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is what you it will look like:&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/floats_example.jpg&quot; alt=&quot;Example CSS floats page&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;CSS Layout Example&lt;/div&gt;

&lt;h3 id=&quot;clear-it-up&quot;&gt;Clear it up&lt;/h3&gt;

&lt;p&gt;Examine the code, not much too it right? You might notice one piece of code in the HTML where I create an empty container with a class of clear. If you reference the CSS file you will see that I give the class of clear one property, &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt;. To know why this needs to be there requires understanding of what floats actually do to your page’s flow in order to accomplish their goal. When we set the properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; on their respective containers, we allowed them to &lt;em&gt;float&lt;/em&gt; next to each other, but what happens to the rest of the page? Unfortunately closing the floated containers does not end the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; CSS property. When you a declare a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; it breaks the page flow, forcing all proceeding content to conform the the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; rule. If we were just using this on an image, we might not even notice that the page is still trying to build itself around the image after it has already been initally wrapped by text, but it is. In the case of creating page layouts this will become noticeable. Look what happens in the image below. I have removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; from the above CSS code to show you what happens to the bottom container:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/bad_floats_example.png&quot; alt=&quot;Example of not clearing your floats&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the bottom container looks like it is now part of a middle container with the left/right boxes. The HTML code still says otherwise, but the browser is attempting to &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; the bottom container around the right container, since the page is now set to &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; around it. There are a few different tricks to &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; your floats, in the example code I just created an empty container after my floated content and used the property &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt; to reset the page flow back to default. If you wanted, you could just use &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: left&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: right&lt;/code&gt; if you were only looking to clear one of the float properties.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When calling &lt;em&gt;clear: both&lt;/em&gt; on an empty container like I did, the container needs to be a sibling node of the nodes containing the floats that you intend to clear.&lt;/div&gt;

&lt;h3 id=&quot;lets-talk-about-positions&quot;&gt;Let’s talk about positions&lt;/h3&gt;

&lt;p&gt;So now you can use floats to manipulate objects around each other, and even create entire page layouts. But what if you just want to tell something where it should be? This is where we can make use of the CSS property &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Position can have four different values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static: The object is static and follows all of it’s default properties. (Default)&lt;/li&gt;
  &lt;li&gt;Relative: You will now be able to move this object relative to it’s static position.&lt;/li&gt;
  &lt;li&gt;Absolute: Moves the object onto it’s own &lt;em&gt;stack&lt;/em&gt;, or sometimes referred to as a layer. This object now essentially has it’s own flow completely removed from everything else on the page.&lt;/li&gt;
  &lt;li&gt;Fixed: Same as absolute, except the object will be fixed to it’s position on the window. (An absolute object will still scroll with the page, a fixed object will not)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the code example below where I create the two simple boxes:&lt;/p&gt;

&lt;p&gt;HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS Positions Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_static.png&quot; alt=&quot;Static Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Static positioned boxes&lt;/div&gt;

&lt;p&gt;Remember, by default both of those &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; boxes have a position of static. But if I set the bottom box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: relative&lt;/code&gt;, I can now move that box in any direction in relation to it’s default position in the HTML flow of the page (in this case, underneath the top box).&lt;/p&gt;

&lt;p&gt;Updated CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_relative.png&quot; alt=&quot;Relative Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Relative positioned boxes&lt;/div&gt;

&lt;p&gt;We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; CSS properties to move the box. In the example I moved the green box &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the top and &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the left of it’s static position.&lt;/p&gt;

&lt;p&gt;Now let’s go ahead and move the green box neatly on top of the blue using &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt;. Here are the changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_absolute.png&quot; alt=&quot;Absolute Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Absolute positioned boxes&lt;/div&gt;

&lt;p&gt;Because we set the box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt; it now exists on it’s own stack, with it’s own page flow. So moving the box &lt;code class=&quot;highlighter-rouge&quot;&gt;top: 50px&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;left: 50px&lt;/code&gt; will be in relation to the top corner of the page.&lt;/p&gt;

&lt;h3 id=&quot;nice-now-what&quot;&gt;Nice, now what?!&lt;/h3&gt;

&lt;p&gt;You have a better understanding of how to use the CSS properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Take some time to play around the with the power they offer in web design.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/02/26/explaining-css-floats.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/02/26/explaining-css-floats.html</guid>
      </item>
    
  </channel>
</rss>