<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jamie Locatis, Web Developer</title>
    <description>The adventures of a retail manager turned web developer! Posting ideas relating to HTML, CSS, Ruby, PHP, JavaScript, and much more.
</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Star Wars Opening Crawl in CSS</title>
        <description>&lt;p&gt;How about something cool and completely useful on every website? Let’s build a Star Wars opening crawl entirely using CSS. No JavaScript required!&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/swcss/crawl_example.jpg&quot; alt=&quot;Star Wars Crawl&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;It’s quite simple really. First build a basic HTML page containing two &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers for our crawl content.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Star Wars Quiz :D&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./css/scrolling.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/css?family=News+Cycle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;crawl_box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_episode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Episode I&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;THE PHANTOM CODE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is an absolutely useful Star Wars opening crawl for any website! Impress your visitors with how awesome this is. And most of all, have fun! It's what George always wanted....&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Made completely in CSS3, no JavaScript required! ;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The outer &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl_box&lt;/code&gt; will contain most of the wizardry required to make this work! The inner &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an id of &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; will contain the engaging words you wish to share with the world. For the crawling text I simply used &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags to get the spacing needed in between your paragraphs. I did use two different &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers to get the crawl episode number and title looking as close as (I think) possible to the real thing.&lt;/p&gt;

&lt;p&gt;Now for some movie making magic! Let’s use CSS to set how we want our &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; of the page to look. I grabbed a generic star background image off Google Images (yes I know it is NOT the exact Star Wars background image). You can choose any background that suits you best, but I would make sure to go with a higher resolution image. That way it holds up well with your great looking crawl. Here is a &lt;a href=&quot;/assets/images/swcss/star_background.jpg&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt; to the one I used. Also (after extensive research) I decided the font ‘News Cycle’ comes fairly close to the original crawl font. But play around and find one that suits you best!&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; ‘News Cycle’ is available free from Google Fonts. Just use the CSS stylesheet link in your page’s head to include the use of the font throughout your page! &lt;a href=&quot;https://fonts.google.com/specimen/News+Cycle&quot; target=&quot;_blank&quot; style=&quot;color:black&quot;&gt;Link&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The next bit of CSS will animate our crawl using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes&lt;/code&gt; rule. Read more about how that works &lt;a href=&quot;https://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'News Cycle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&quot;../images/star_background.jpg&quot;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;no-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* This will create the 'crawl' animation using the @keyframes rule. The animation
is defined below */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-170%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we set the CSS for our two containers &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl_box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#crawl_box&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Transforms the text perspective to look 3D */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;25deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Positions the crawl on the page and sets the font
   to closely match the actual Star Wars crawl. */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-9em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;350%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;justify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#content&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Creates the 'crawl' animation we call in @keyframes */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;transform-origin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; in order to create the 3D perspective of the text. Combined with the animation we build (called &lt;code class=&quot;highlighter-rouge&quot;&gt;crawl&lt;/code&gt;, which is than called in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes&lt;/code&gt; rule from above), we create the 3D illusion of the text moving through space away from you. If you need to change the timing of the crawl to more closely match your text, simply edit the time (second property) of &lt;code class=&quot;highlighter-rouge&quot;&gt;animation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, here is the quick CSS I created for centering and styling the episode title and name. You don’t &lt;em&gt;have&lt;/em&gt; to include this, any good film buff would know that Star Wars was originally released in 1977 without an episode number or title in the opening crawl.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Fun Fact:&lt;/strong&gt; The title ‘Episode IV: A New Hope’ was added in 1980 when The Empire Strikes Back was released as Episode V.&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#center_episode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#center_title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.75em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it! Have fun with it. Put it on every website you make, together let’s make the internet great again! Star Wars crawls everywhere!&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//2017/03/17/starwars-crawl-css.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/03/17/starwars-crawl-css.html</guid>
      </item>
    
      <item>
        <title>Explaining CSS Floats and Positions</title>
        <description>&lt;p&gt;Let’s talk about floats and positions. Often a headache for beginning web developers, taking a moment to understand how they work can make a huge difference. Floats and positions can be used for many things, from applying text wrap to an image, to controlling the &lt;em&gt;flow&lt;/em&gt; of your content, to building a well structered page layout. A basic understanding of how these work is necessary to becoming a solid web developer.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-float&quot;&gt;What is a float&lt;/h3&gt;

&lt;p&gt;The basic concept behind a float, and it’s purpose, is found in everyday centuries-old publishing. We are accustomed to looking at a newspaper, or reading a magazine, and seeing pictures with text. Usually, that text is neatly wrapped around an image in some manner that flows with the rest of the page. In some ways this saves space, allowing for more content to be shuffled onto the page. Although it can also make something look more appealing to the eye, and grab your attention. Floats are a result of the need to accomplish this on the internet through HTML. This is the simple idea of why we have floats in CSS. We can use this tool to position and layout our web pages how we see fit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/print-layout_example.png&quot; alt=&quot;Print Layout Example&quot; width=&quot;200px&quot; style=&quot;float: left&quot; /&gt;To the left you can see an example of using floats in everday print. The text is wrapped around the images, hence the term “text-wrap”. By wrapping the images with text, we are integrating them into the pages’ &lt;em&gt;flow&lt;/em&gt;. We wouldn’t want the text of a printed page to just run over the image, that would defeat the purpose of the image right? A lot goes into designing the flow of content, and being able to place an image where the author or page designer wants it is essential.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/web-text-wrap.png&quot; alt=&quot;Web Text Wrap Example&quot; width=&quot;200px&quot; style=&quot;float: right&quot; /&gt;To the right you can see another example of floating images, only this time we have done it for a website. Looks similiar doesn’t it? That’s becuase it is this same idea. We are integrating images into the flow of our page when we &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; them. We could just let our text run over the top of the image, but that would make the image rather useless if it was an integral part of our page content. We could also just let the image sit on it’s own line, which is what HTML would do by default. Maybe this is how your content is designed to &lt;em&gt;flow&lt;/em&gt;. But by using floats as a web developer you at least have much greater control over what you can do. The two images embedded in the content above had the &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; CSS style applied to them.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When you float an element it automatically has a few default CSS properties, including &lt;em&gt;display: block&lt;/em&gt;.&lt;/div&gt;

&lt;h3 id=&quot;cool-now-how-can-i-use-this-thing&quot;&gt;Cool, now how can I use this thing?&lt;/h3&gt;

&lt;p&gt;Like above, you can use this thing to wrap text around your images. But what else can it do? How about control the flow of your website’s entire layout? Of course it can! Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; property on your page’s &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containers so you can float them next to each other.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/web-layout_example.png&quot; alt=&quot;Web Layout Example&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;

&lt;p&gt;In the above image you see a simple example where two containers have used &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; to create a nice layout and flow for the page. Let’s write some simple code doing this in action! Paste the code below into an empty HTML file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float_sample.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example CSS floats page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm the top box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm a left box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm a right box&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm the bottom!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now paste the accompanying CSS code into an empty CSS file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.top&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;74%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.bottom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.clear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is what you it will look like:&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/floats_example.jpg&quot; alt=&quot;Example CSS floats page&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;CSS Layout Example&lt;/div&gt;

&lt;h3 id=&quot;clear-it-up&quot;&gt;Clear it up&lt;/h3&gt;

&lt;p&gt;Examine the code, not much too it right? You might notice one piece of code in the HTML where I create an empty container with a class of clear. If you reference the CSS file you will see that I give the class of clear one property, &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt;. To know why this needs to be there requires understanding of what floats actually do to your page’s flow in order to accomplish their goal. When we set the properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float: left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; on their respective containers, we allowed them to &lt;em&gt;float&lt;/em&gt; next to each other, but what happens to the rest of the page? Unfortunately closing the floated containers does not end the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; CSS property. When you a declare a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; it breaks the page flow, forcing all proceeding content to conform the the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; rule. If we were just using this on an image, we might not even notice that the page is still trying to build itself around the image after it has already been initally wrapped by text, but it is. In the case of creating page layouts this will become noticeable. Look what happens in the image below. I have removed the &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; from the above CSS code to show you what happens to the bottom container:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/floats/bad_floats_example.png&quot; alt=&quot;Example of not clearing your floats&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the bottom container looks like it is now part of a middle container with the left/right boxes. The HTML code still says otherwise, but the browser is attempting to &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; the bottom container around the right container, since the page is now set to &lt;code class=&quot;highlighter-rouge&quot;&gt;float: right&lt;/code&gt; around it. There are a few different tricks to &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt; your floats, in the example code I just created an empty container after my floated content and used the property &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: both&lt;/code&gt; to reset the page flow back to default. If you wanted, you could just use &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: left&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;clear: right&lt;/code&gt; if you were only looking to clear one of the float properties.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note: &lt;/strong&gt;When calling &lt;em&gt;clear: both&lt;/em&gt; on an empty container like I did, the container needs to be a sibling node of the nodes containing the floats that you intend to clear.&lt;/div&gt;

&lt;h3 id=&quot;lets-talk-about-positions&quot;&gt;Let’s talk about positions&lt;/h3&gt;

&lt;p&gt;So now you can use floats to manipulate objects around each other, and even create entire page layouts. But what if you just want to tell something where it should be? This is where we can make use of the CSS property &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Position can have four different values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static: The object is static and follows all of it’s default properties. (Default)&lt;/li&gt;
  &lt;li&gt;Relative: You will now be able to move this object relative to it’s static position.&lt;/li&gt;
  &lt;li&gt;Absolute: Moves the object onto it’s own &lt;em&gt;stack&lt;/em&gt;, or sometimes referred to as a layer. This object now essentially has it’s own flow completely removed from everything else on the page.&lt;/li&gt;
  &lt;li&gt;Fixed: Same as absolute, except the object will be fixed to it’s position on the window. (An absolute object will still scroll with the page, a fixed object will not)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the code example below where I create the two simple boxes:&lt;/p&gt;

&lt;p&gt;HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS Positions Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_static.png&quot; alt=&quot;Static Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Static positioned boxes&lt;/div&gt;

&lt;p&gt;Remember, by default both of those &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; boxes have a position of static. But if I set the bottom box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: relative&lt;/code&gt;, I can now move that box in any direction in relation to it’s default position in the HTML flow of the page (in this case, underneath the top box).&lt;/p&gt;

&lt;p&gt;Updated CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_relative.png&quot; alt=&quot;Relative Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Relative positioned boxes&lt;/div&gt;

&lt;p&gt;We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; CSS properties to move the box. In the example I moved the green box &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the top and &lt;code class=&quot;highlighter-rouge&quot;&gt;50px&lt;/code&gt; from the left of it’s static position.&lt;/p&gt;

&lt;p&gt;Now let’s go ahead and move the green box neatly on top of the blue using &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt;. Here are the changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#top-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#bottom-box&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/floats/position_absolute.png&quot; alt=&quot;Absolute Position&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Absolute positioned boxes&lt;/div&gt;

&lt;p&gt;Because we set the box to &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt; it now exists on it’s own stack, with it’s own page flow. So moving the box &lt;code class=&quot;highlighter-rouge&quot;&gt;top: 50px&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;left: 50px&lt;/code&gt; will be in relation to the top corner of the page.&lt;/p&gt;

&lt;h3 id=&quot;nice-now-what&quot;&gt;Nice, now what?!&lt;/h3&gt;

&lt;p&gt;You have a better understanding of how to use the CSS properties &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;. Take some time to play around the with the power they offer in web design.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/02/26/explaining-css-floats.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/02/26/explaining-css-floats.html</guid>
      </item>
    
      <item>
        <title>Build Your First Game for the Web</title>
        <description>&lt;p&gt;This tutorial will walk you through the steps of creating an interactive Where's Waldo game for the web. You will be able to select you're own Where's Waldo image, and build your program around this image. Introducing some basic JavaScript and Ruby code with AJAX functionality.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/waldo_front.jpg&quot; alt=&quot;My Where's Waldo game&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;My Where's Waldo game&lt;/div&gt;

&lt;h3&gt;Basic Concepts&lt;/h3&gt;

&lt;p&gt;It will store high scores on the server with the player's name for others to see. Most importantly from a programming perspective, the location of Waldo within the image will be stored server-side preventing the player from &quot;cheating&quot;. To break the program down we will need to accomplish the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;These first steps can be accomplished on your own before we get into the nitty-gritty:&lt;/li&gt;
	&lt;li class=&quot;hidden-li&quot;&gt;
		&lt;ul&gt;	
			&lt;li&gt;Search the internet for a Waldo image to use. (And yes you will need to solve it first so you know where Waldo is!)&lt;/li&gt;
			&lt;li&gt;Build this image into a basic HTML page for now. (If you don't know HTML, go check out some tutorials and come back to this later!) Don't worry too much about the CSS styling of the page. Portions of your program may eventually rely on a little bit of CSS so I would reccommend for now just creating an empty stylesheet and integrating that into your HTML page.&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;After the above is done, we can start accomplishing these goals:&lt;/li&gt;
	&lt;li class=&quot;hidden-li&quot;&gt;	
		&lt;ul&gt;
			&lt;li&gt;Build a way for the user's click location within the image to be calculated.&lt;/li&gt;
			&lt;li&gt;Send that information to a server.&lt;/li&gt;
			&lt;li&gt;Once on the server-side, check the click location against Waldo's actual location.&lt;/li&gt;
			&lt;li&gt;Send either true or false back to the client.&lt;/li&gt;
			&lt;li&gt;Either display some sort of message indicating to the user they haven't found Waldo yet, or end the game if true is returned.&lt;/li&gt;
			&lt;li&gt;If true, tell the user they're successful.&lt;/li&gt;
			&lt;li&gt;Add a live timer to the page so we can provide a little pressure to the user, and give them a score at the end.&lt;/li&gt;
			&lt;li&gt;Build a way for these timed scores to be stored in a high scores list on the server.&lt;/li&gt;
			&lt;li&gt;Add the high scores list functionality to the game (including allowing the user to save their name with their score).&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;/ul&gt;

&lt;p&gt;Sounds easy enough right!? Let's get started...&lt;/p&gt;

&lt;p&gt;First let's go to your HTML page containing your Waldo image. We need a way to get x and y's pixel variables of the user's click location. We will compare these numbers to the real location of Waldo (which you should be aware of). First let's find Waldo's pixel coordinates within your image. If you haven't already, I suggest you use HTML to set a fixed width for your image, especially if the image is larger than your typical screen at full size. You want to make sure the image fits nicely in a window for the user to see, and also that it's size will be the same across different browser/computer setups. After this is done we will use the JavaScript console of your browser to find Waldo's coordinate range.&lt;/p&gt;

&lt;p&gt;In your code editor create a new JavaScript file. We will be using JavaScript for programming this portion of the game. Now let's create a function that will tell us the click location of our mouse within the image. This can be done with the code below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findClickLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;pageX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;waldo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;pageY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;waldo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We will be using JavaScript's &lt;em&gt;window.event&lt;/em&gt; method which will give us all sorts of information about the state of the page as the event happens. But wait, what is the event? We also need to add an event listener to our JavaScript that will &quot;listen&quot; for when the click occurs, and execute the code in our &lt;em&gt;findClickLocation&lt;/em&gt; function when it happens. Make some room at the top of your JS file and add the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;waldo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findClickLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order for the above event listener to work, you will need to return to your HTML page and give your Waldo image the class name &quot;Waldo&quot; (please see HTML tutorials on how this can be accomplished). The above JS code will add the event listener when our &lt;em&gt;window&lt;/em&gt;, or page, loads. Just one last step we need in order to find Waldo's coordinates. Add a &lt;em&gt;debugger;&lt;/em&gt; to the end of your findClickLocation function. The debugger will let us use your browser's JavaScript console to see where we are clicking. Everytime the browser reaches the debugger line (which will be on every click), it will halt the execution of the program and allow you to interact with it's current state.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/JS_console.jpg&quot; alt=&quot;Accessing the JavaScript console&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Accessing the JavaScript console&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/click_event.jpg&quot; alt=&quot;Looking at a click event in the console&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Click event in the console&lt;/div&gt;

&lt;p&gt;The first image above shows me opening my JavaScript console. The second image shows me clicking on my waldo image with a debugger in place, and exploring what is returned in &lt;em&gt;window.event&lt;/em&gt;. In the above example I am using Google Chrome, but your browser of choice will have something similiar. Feel free to type &quot;click_event&quot; into your console, and see the output of everything &lt;em&gt;window.event&lt;/em&gt; gives you. All we need is the &lt;em&gt;offsetX&lt;/em&gt; and &lt;em&gt;offsetY&lt;/em&gt; position of the click. These are the location of the mouse within the event target (in this case the Waldo image).&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/waldo/x_and_y.jpg&quot; alt=&quot;Example location of x and y&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;X and Y in the console&lt;/div&gt;

&lt;p&gt;Click around and write down the range Waldo exists within. We will need this a bit later. For now let's focus on getting the click location of &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; to a server. For this piece of the project we will be coding in Ruby on the server-side, and will be using the Sinatra framework. If you aren't sure how the Sinatra framework handles things, please read over the beginnings of &lt;a href=&quot;http://www.sinatrarb.com/intro.html&quot; target=&quot;blank&quot;&gt;this README&lt;/a&gt; to familiarize yourself. You will only need to understand the basics of a Ruby web framework in order to proceed. Create your controller action file first. Start it out with this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sinatra'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./functions.rb'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pry'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/return'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;waldo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waldoTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;waldo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waldo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waldo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above code will get the routes you need to finish the next few steps of our program. Return to your JS script file and let's write a function that will take our &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; coordinates and send them to the Ruby route '/return' we just created. Create a function named &lt;em&gt;getData&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coordinates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;y=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/return?'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;s2&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// var waldo_test = httpRequest.responseText&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true!!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;false :(:(:(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For now we just want to make sure it works, so I have included &lt;em&gt;console.log&lt;/em&gt; statements within our true/false test that will just print &quot;true&quot; or &quot;false&quot; to your JS console. You're probably wondering what some of that code is. Here I am introducing AJAX (Asynchronous JavaScript and XML). Using AJAX, we can communicate easily between our client side code and our server side code. Examine the above code and see if you can guess what it is doing. It creates a new &lt;em&gt;XMLHttpRequest&lt;/em&gt;, and sends our &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; variables as parameters to the server where we can use them in our Ruby code. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started&quot; target=&quot;blank&quot;&gt;Here&lt;/a&gt; is some good entry level reading on the details of AJAX if interested, but it is important to understand that it is basically designed to do two things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Make requests to the server without reloading the page&lt;/li&gt;
	&lt;li&gt;Receive and work with data from the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back in the Ruby route for '/return' we need to create our function &lt;em&gt;waldoTest&lt;/em&gt; to check and see if the user clicked on Waldo or not. If you haven't done so already, make a ruby file to hold your functions. Let's add the code to check if waldo exists:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/36aa6975ecb35fc3f872ca0f8cf9679b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This will return true or false based on your provided coordinates. Notice back on the controller page that we set this variable to a string before returning it at the end of the route. Any variable returned at the end of your Ruby route is what the JavaScript AJAX request will receive. A JavaScript boolean object is different from a Ruby boolean object, so we will instead use a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point test your program. It should be working. True or false should be returned to your JS console based on your click. If you have that working, let's make this thing a little more functional!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This next step is somewhat more open-ended. If you would like to let the user know that their click was unsuccessful, there are several creative ways you can do it. I just added an extra line in my HTML essentially saying &quot;wrong location&quot;, and used some JavaScript and CSS magic to display it for a few seconds if false is returned. What about true? In my HTML I built a reusable hidden modal window (this way I can re-use it for both the end game message and high scores). If true is returned, this window is displayed. Get creative with your HTML/CSS skills and see what you can come up with! Here is my updated &lt;em&gt;getData&lt;/em&gt; function replacing our console.log statements with working code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/cc8be8b6d19ab8a71a2d510e1c767a4a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You might notice some code in the above function referring to a timer. Let's add some fun to your game by making a live timer on the screen that starts counting the instant the user loads the page. We can also use these times as a means of tracking high scores. There are several ways a timer in JavaScript can be accomplished. For this program I built a custom timer, that updates a string formatted like a clock (&quot;minutes:seconds&quot;) every second:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/c1258b40bc6b9d6a5c602bc5d70d18a7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;My approach will create a bigger challenge later on when we go to sort our scores based on time (since we aren't actually storing time, but a string of time). But it does, in my opinion, look nicer to the user. &lt;/p&gt;

&lt;p&gt;So the timer code was already added to my &lt;em&gt;getData&lt;/em&gt; function above, now let's build a function that will store those scores on the server. You may have already noticed in my &lt;em&gt;getData&lt;/em&gt; function I call a new function named &lt;em&gt;storeScores&lt;/em&gt; that will run if a player wins and chooses to submit their score. We will need to create another AJAX request to send this information back to the server. Here goes:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/b29e52182f65ac43ee9a4849924a1648.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;While we are at it, let's also create a way to pull back those scores from the server for display. Create a link somewhere in your HTML and add an event listener in your JavaScript. Here is the code creating another AJAX request getting our scores:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/6b88bd2d8b50d739b750876b7b18febd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Let's add some routes to our ruby controller to make this all work:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/428e6dc0062f43fe74cf3b947b561d2c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In our '/storescores' route we send the data to a function called &lt;em&gt;storeScore&lt;/em&gt;. Let's write it:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/8957eba8a7a4084ac454fb49bc27a70f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We are writing the scores to a .csv file (in the above example, called 'highscores.csv') that will be stored on the server. Now what if someone wants to see the high scores? Let's make the '/showscores' route a reality. Depending on how you chose to track time you could be doing something completely different. But that's the fun in programming, solving unique problems in different ways! My function is a little more complicated because it needs to break our clock string down into seconds, sort the scores by seconds, and restore the time back to it's clock format. It's a fun algorithmic excercise to rack your brain on! Here is the code:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/jlocatis/1d3714de0a2d552d1efa55c2d3968b3c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;One last bonus that happened in the code above but I didn't explain was adding a name to the high scores. Before anything in JS or Ruby can accomplish this, you need to get some sort of input method integrated into your HTML. If you look above you can see I grab the user's name and send it with the score in the &lt;em&gt;storeScores&lt;/em&gt; JavaScript function. The &lt;em&gt;storeScore&lt;/em&gt; Ruby function than writes the name and corresponding time to the .csv file. The &lt;em&gt;loadScores&lt;/em&gt; function will sort the names as it sorts the times.&lt;/p&gt;

&lt;p&gt;I hope this tutorial was informative and fun! Spend sometime after you get the game working styling it up through HTML and CSS. For added difficulty you can add multiple Waldo pictures to your challenge. Enjoy!&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/02/24/build-wheres-waldo.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/02/24/build-wheres-waldo.html</guid>
      </item>
    
      <item>
        <title>The DOM and JavaScript</title>
        <description>&lt;p&gt;The DOM, short for Document Object Model, gives you some much needed dynamic power to build better, more interactive websites. Using the DOM, you are able to navigate through HTML code as if it were tree of interconnected objects. You can dynamically add, remove, or most importantly alter these objects as your user interfaces with your website.&lt;/p&gt;

&lt;h3 id=&quot;how-can-this-be-used&quot;&gt;How can this be used?&lt;/h3&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/DOM/pic_html_tree.gif&quot; alt=&quot;DOM Tree&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Visual Example of navigating the HTML DOM Tree&lt;/div&gt;

&lt;p&gt;In the above example you can see how the DOM can be traversed. HTML is structered so that elements or tags are always associated with a parent element (all the way to the top of the page, beginning at the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag or  &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/code&gt; tag). Objects on your page (text, images, forms, etc…) are all connected to their parent tags in a hierarchical tree structure. All of these objects are considered “nodes” of the DOM, pieces of the document model.&lt;/p&gt;

&lt;p&gt;Using the DOM and Javascript together gives you a powerful tool with which to manipulate your website. When writing HTML you’ll find it’s completely static, the web browser simply runs through the code from top to bottom and prints out your website for the user typically in that exact order. Hence the term &lt;em&gt;markup language&lt;/em&gt; in HTML. Any interaction with the website is extremely limited to only what you have asked it to show. You can do so much more though by dynamically integrating HTML with a real language such as Javascript. As an example, you can have the user click a button and suddenly, without reloading the page, it’s entire structure can be re-written.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/DOM/comments1.png&quot; alt=&quot;Replies Closed&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Example comments HTML page&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/DOM/comments2.png&quot; alt=&quot;Replies Open&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Using Javascript and the DOM to expand Bob's replies&lt;/div&gt;

&lt;p&gt;In the above example you can see a comments system that has been written for in plain HTML. By using Javascript and the DOM to dynamically alter the page based on user input, you can see we change the page in the second image when a user has clicked on something. In the example the user has clicked a link to see the 4 replies to Bob, and without reloading the page, the replies are shown.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-difference-between-client-side-and-server-side-web-development&quot;&gt;What is the difference between “client-side” and “server-side” web development?&lt;/h3&gt;

&lt;p&gt;There is an important but easy distinction between “client-side” and “server-side” web development, and yes it’s written right into their descriptors. Anything developed to happen “client-side” is code that is entirely managed and processed on your personal computer. You send a request to a website (by typing in &lt;em&gt;jamielocatis.com&lt;/em&gt; for example), and the server sends back all of the code needed to make the website work. All of the processing through that code happens on your computer, inside of your web browser. HTML happens completely on the “client-side”. JavaScript is also “client-side”, but we can use it to communicate with the server to request and receive and new data for the page (without having to reload the page).&lt;/p&gt;

&lt;p&gt;Opposite to this is “server-side” development, where portions of the code are processed completely on the server, and the server sends back to your computer only the HTML needed to display whatever it is you were requesting. Than using a language such as JavaScript, we can actively update the DOM with our new information.&lt;/p&gt;

&lt;p&gt;Let’s say the example above was something as robust as &lt;em&gt;Facebook&lt;/em&gt;. On your initial page load, your computer would only need the code for the top image to load right? Why waste time and bandwidth sending everything else! When the user hits the link to show Bob’s replies, a language like JavaScript would send an AJAX request to the server for those replies. The server sends the code back, and the HTML DOM is updated to display all of the replies.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; I haven't talked about AJAX just yet. If you aren't sure what this is, check out my &quot;Build Your First Game for the Web&quot; tutorial!&lt;/div&gt;

&lt;h3 id=&quot;what-are-events&quot;&gt;What are events?&lt;/h3&gt;

&lt;p&gt;We have talked about how using the DOM and Javascript can be a great way to add some true dynamic functionality to your website. “Events” are exactly how they sound, coded events that will tell the computer when “this” happens go do “that”. In the comments example from above a Javascript event was coded to a DOM node (in this case the ‘4 replies’ link) that said when clicked, do everything needed to get the 4 replies for Bob.&lt;/p&gt;

&lt;h3 id=&quot;what-are-event-listeners-how-are-they-used-in-web-development&quot;&gt;What are event listeners? How are they used in web development?&lt;/h3&gt;

&lt;p&gt;Events were described above, essentially a way of telling the computer to do something when something specifically happens to trigger it. But what is that specific something? In Javascript it’s called an event listener.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repliesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reply_click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repliesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;repliesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showReplies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are several different ways of creating an event listener. In the above example we wait for a “click” on the ‘4 Replies’ link, and than run the function ‘showReplies’. We can even create groups of events through loops, like the above example. It creates an event listener for every defined ‘reply_click’ link it finds in the DOM. When clicked, it will run the &lt;code class=&quot;highlighter-rouge&quot;&gt;showReplies&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;get-to-know-the-dom&quot;&gt;Get to know the DOM&lt;/h3&gt;

&lt;p&gt;Understanding the DOM is important to good web development. Play around with it and see the power it has to offer you. Updating websites without reloading them is significant when you think about how your user will be interacting with what you build.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/01/03/navigating-the-dom.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/01/03/navigating-the-dom.html</guid>
      </item>
    
      <item>
        <title>Introduction to the DOM</title>
        <description>&lt;p&gt;The DOM, short for Document Object Model, gives you some much needed dynamic power to build better, more interactive websites. Using the DOM, you are able to navigate through HTML code as if it were tree of interconnected objects. You can dynamically add, remove, or most importantly alter these objects as your user interfaces with your website.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/01/02/basic-dom-intro.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/01/02/basic-dom-intro.html</guid>
      </item>
    
      <item>
        <title>Building Your First CLI App</title>
        <description>&lt;p&gt;This is a basic introduction to writing command line applications, the fundamental core of every programmer’s knowledge. This tutorial will navigate you through the basics of the CLI (Command Line Interface) and help you build a quick and useful application.&lt;/p&gt;

&lt;div class=&quot;img-container&quot;&gt;&lt;img src=&quot;/assets/images/basic_cli/basic_terminal.png&quot; class=&quot;article-image&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img-container img-caption&quot;&gt;Terminal&lt;/div&gt;

&lt;h3 id=&quot;accessing-your-computers-terminal&quot;&gt;Accessing your computer’s terminal&lt;/h3&gt;

&lt;p&gt;To your open your computer’s Unix terminal in macOS, find your Utilities folder within applications. You can also press &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ + space&lt;/code&gt; to bring up macOS’s Spotlight search bar, and type terminal. You’ll be referring back to the terminal often to check on the status of your code, so keep it accessible.&lt;/p&gt;

&lt;p&gt;Using the terminal is fairly easy once you understand how to navigate it. &lt;a href=&quot;http://www.dummies.com/computers/macs/mac-operating-systems/how-to-use-basic-unix-commands-to-work-in-terminal-on-your-mac/&quot; target=&quot;_blank&quot;&gt;Read this&lt;/a&gt; short article on all of the commands available to you. Once you feel like you have a good grasp to navigating the terminal (much like you would navigate the Finder on your Mac or folders in Windows), move onto the next part of this tutorial.&lt;/p&gt;

&lt;div class=&quot;note_box&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This tutorial covers using the command line interface only in an Unix environment (macOS or Linux). If on Windows, see &lt;a href=&quot;https://www.lemoda.net/windows/windows2unix/windows2unix.html&quot; target=&quot;_blank:&quot;&gt;this article&lt;/a&gt; on the differences in CLI commands.&lt;/div&gt;

&lt;h3 id=&quot;program-introduction&quot;&gt;Program introduction&lt;/h3&gt;

&lt;p&gt;Write your very own &lt;strong&gt;Question Tracker&lt;/strong&gt; program using Ruby! You’ll be able to access the program directly from the CLI (command line interface), making jotting down notes as you code easier than ever!&lt;/p&gt;

&lt;h3 id=&quot;step-by-step-instructions&quot;&gt;Step-by-Step Instructions&lt;/h3&gt;

&lt;p&gt;Start by having your code editor and terminal open. In a new folder of your choice, create two new files. Make an empty ‘questions.txt’, we will store our questions here later, and save your other file for code as ‘main.rb’.&lt;/p&gt;

&lt;p&gt;Let’s start writing code! Begin your code with the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pry'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first piece of code will be important later as we build a way for you to quickly access your question tracking program from your CLI without having to type a lot in. The second piece will allow you to check your code as you program. Pry is a ruby &lt;strong&gt;gem&lt;/strong&gt;, or “add-on”, that will let you interact and play within your code as it’s running. This will be especially helpful to you later on in your programming experience as you work through bugs in your code.&lt;/p&gt;

&lt;p&gt;If we break the program down algoithmically we can create a to do list of simple tasks the program aims to do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be able to store questions to a flat text file.&lt;/li&gt;
  &lt;li&gt;Be able to view those questions.&lt;/li&gt;
  &lt;li&gt;Be able to remove questions by selecting the question number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s start by building our program in this order!&lt;/p&gt;

&lt;p&gt;First let’s write the code to load our text file into our program. We will be defining what is called a function, a series of code that we can reuse without the need to be constantly re-typing it. Inside of this function we will be defining an empty array, a list of items, called questions. We will use the &lt;code class=&quot;highlighter-rouge&quot;&gt;File.read&lt;/code&gt; method to look into our text file and extract the questions that were last saved (or in the case of your first time, an empty file). The next line is looking at every question and deleting something called “\n” (we’ll talk about this a bit later). Your code should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadArray&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/FILE PATH TO YOUR .TXT HERE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A lot is going on there, but if you study it you should be able to see what it does. We start the empty questions array and call up the file to read. Next you see a loop (&lt;code class=&quot;highlighter-rouge&quot;&gt;questions.each do&lt;/code&gt;). This is going to “loop” through the array, our list of questions. For each question in the list (which if you look at the loop, will be represented by x) we are asking the computer to do something for us. In this instance we are looking at the first three characters of the sentence and asking them to be replaced with a blank space (represented with the “”). This is becuase when we store the questions we give them display numbers, but as we have the computer process through them we won’t have a need for them. You might also be asking yourself, but we are only saying characters 0-2 right? In a lot of programming languages, including Ruby, positions of items and objects begin at 0 instead of 1 (therefore 0-2 can interpreted as 1-3). At the very end of this function we return the questions loop, now filled with the questions from our .txt file. Using this function we have a basis to display questions stored in a file, and look at how we might go about adding and deleting questions.&lt;/p&gt;

&lt;p&gt;Next let’s look at adding a question to our list. We will accomplish two things here, which will save us time in the next step! By using functions we can break out some of the code we would need to add a question that we would also use to remove a question. The first function we need to create will actually let us add a question. Take a look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Take a moment to look at the function addQuestion, what do you think every line is accomplishing? For starters you might notice we have something new on the line where we define the function: &lt;code class=&quot;highlighter-rouge&quot;&gt;def addQuestion(questions, question)&lt;/code&gt;.  Here we are bringing information, variables, from other areas of the code and passing them through the addQuestion function. So we are saying we will need a “questions” set of data (remember our “questions” array from above), and of course our single question which we will be adding. In the first line we use an object method, in this case the &lt;code class=&quot;highlighter-rouge&quot;&gt;string.join&lt;/code&gt; method. As you learn Ruby you will begin to understand all of the different data types (so far we have talked about arrays and strings), but for now we can assume that this method will join our question into one long string. So instead of the words existing individually on their own in a list, the entire sentence will be one “piece” of our array. The next line isn’t as obvious, but we are using another string method, this one is called &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;. A quick google search would tell you what it does. Here we are using it to “shift” the sentence we just made outside of it’s list. Why? Because on the next line we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; shovel brackets to add our new question to our current list of questions. If we didn’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;.shift&lt;/code&gt; to move our new question out of an array, we would be creating an array within an array. At some point you’ll be doing this, but it isn’t neccassary for our program (and it would make it a lot harder to work with).&lt;/p&gt;

&lt;p&gt;Next we will write our reusable function I mentioned above (the one that will work for both adding and removing questions). I’ve called this one def &lt;code class=&quot;highlighter-rouge&quot;&gt;updateTxtFile(questions)&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateTxtFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;list_of_questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_of_questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;. &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/FILE PATH TO YOUR .TXT HERE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_of_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like before, let’s walk through this line by line to see if we can figure out what is happening. First we are again passing in some information, “questions”, from outside the function. Again it will be our array of questions we’ve been using. Next we create a new “empty” string variable. The next line is a bit tricky, but a good google search would yield it’s purpose. We are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.map!&lt;/code&gt; method on our questions array to “map” over the array and add this special character, &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; to the end of all of our questions. This line is a loop, like we used earlier in the first step. It will find the end of every item in our list (or question), and tack on a &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;. If you haven’t looked up what &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; does yet, it creates a &lt;em&gt;newline&lt;/em&gt; in the text. When you are typing in a word processor and hit enter to go to the next line, well that’s what &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; is doing for us here. Now we just need to add the numbers back onto the front of our questions for display, and we can “update” the .txt file we are storing these questions in. The next line is another loop like we saw in the &lt;code class=&quot;highlighter-rouge&quot;&gt;loadArray&lt;/code&gt; function. It is going to “loop” through each item in our questions array, using “x” to represent which item of the array we are currently on. The first line of this loop will figure out which number question we are on and print it. We are creating a new variable called front, and setting it equal to the “index” position of x (x being the current question we are on). Everything in our array has an “index” value given to it by the computer, so we can use this to our advantage to let the computer number our sentences for us. And remember how I mentioned that Ruby will start counting at 0? That’s why we do &lt;code class=&quot;highlighter-rouge&quot;&gt;questions.index(x) + 1&lt;/code&gt;. Otherwise our first question will be labeled as 0. In the last line of the loop we again use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; shovel brackets to combine our two variables (the question number and the question itself) together to form our list of questions! Remember the loop is doing this for each question, building a clean text list of our questions. The next few lines will write our newly formed list to our file, ‘questions.txt’.&lt;/p&gt;

&lt;p&gt;We have one more function to write, removing questions. Have a look at the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_to_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;q_to_remove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_to_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q_to_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So first off we are passing in two things this time, our array of questions and the question we want removed (q_to_remove). To make this program easy, we just want to type in the number of the question to have it removed. So q_to_remove should be a number. So on the next line we convert q_to_remove into an integer and subtract 1. But the user typed a number in right? In the case of the CLI, the computer will see the number as a string, since it was mixed in with letters. So now you have a third data type (remember: we’ve had arrays, strings, and integers). Much like the other two, integers have lots of different things you can do to them. Also, figure out why we subtracted 1? We added 1 to the display number above right so we didn’t have zero? Well on the next line of code we use the array method .delete_at to delete our question based on it’s integer “index” position. So we need to make sure we are deleting the right question by returning everything to it’s original number. And of course at the end we &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; the questions array back to where it came from. But where was that? Let’s finish our program and write the code that will bring all of this together!&lt;/p&gt;

&lt;p&gt;So below you see the final piece of our programing puzzle. Above we built reusable functions that will make this part super easy for us. All we essentially have to do is figure out how to take what you type in the CLI, and tell the computer which one of the functions above is the one you are attempting to use. Take a look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;## DISPLAY CODE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inputType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputTYpe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'add'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;updateTxtFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rm'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;removeQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;updateTxtFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/FILE PATH TO YOUR .TXT HERE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we need to populate our list of questions, our array. So we set questions equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;loadArray()&lt;/code&gt;. The computer will now run this function, and fill the questions array with our data. Next we set input equal to something called “ARGV”. This is telling the computer in Ruby that we are going to use arguments from the CLI to help tell it what to do. To run this ruby program in your command line you would type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby main.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We want to be able to add/remove questions by just adding onto that command, like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby main.rb add &quot;This is a test question?&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby main.rb rm 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The computer uses ARGV to create an array of words based on everything typed after the ruby main.rb command. We call these arguments, things added onto the command to do something different. This is why above in the addQuestion function we needed to join our words together as one sentence, because as they are typed into the CLI the computer will use ARGV to treat each word as a separate item in an array. On the next line we use the method shift again, and set it equal to inputType. Figure out what shift is doing this time? It takes the first item of the array and will shift it into the the new variable inputType. So we are taking the “add” or “rm” and making it it’s own thing so we can tell the computer what to do.&lt;/p&gt;

&lt;p&gt;The last piece of our code! We use what is called an if/else statement to help the computer figure everything out. We say “if” the inputType we just created above was “add”, go ahead and run the addQuestion function. And after that, run the updateTxtFile function. Notice when we use these functions, we match what information we want to put in with what information we asked for above. Example:&lt;/p&gt;

&lt;p&gt;Up above we defined our add question function as &lt;code class=&quot;highlighter-rouge&quot;&gt;addQuestion(questions, question)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So down below when we told the computer to use that function, we used &lt;code class=&quot;highlighter-rouge&quot;&gt;addQuestion(questions, input)&lt;/code&gt;, we sent in our questions array as well as our input array.&lt;/p&gt;

&lt;p&gt;Notice how the if/else statement is structered. So we already said “if” inputType is “equal to” (represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;) “add” than go ahead and do this code. But what if it’s not? Next we say “else if” (stylized in Ruby as &lt;code class=&quot;highlighter-rouge&quot;&gt;elsif&lt;/code&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;inputType&lt;/code&gt; is “equal to” “rm”, run the the &lt;code class=&quot;highlighter-rouge&quot;&gt;removeQuestion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;updateTxtFile&lt;/code&gt; functions. What if neither of those were typed in? We end our if/else statement with our &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;, if nothing above worked, the computer will do this. In this case we just print out our list of questions.&lt;/p&gt;

&lt;h3 id=&quot;make-it-easy-to-access&quot;&gt;Make it easy to access&lt;/h3&gt;

&lt;p&gt;The last piece of our program will involve just the command line in your terminal. We are going to make it so you can just type “questions” plus your arguments to access your program. That’s better than having to type out “ruby main.rb” everytime right? Yes! If you remember above when I asked you to type &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&lt;/code&gt;, this is where it comes into play. Usually when you run your program you type the “ruby” before your Ruby file, that is how the computer knows to run it as a Ruby program. This line in your code will tell the computer what programing language your program is using. Go to your terminal and make sure you are inside the directory where your question tracker program is stored. At your command line do the following:&lt;/p&gt;

&lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l main.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should be seeing a bunch of output. This represents your file’s current read/write permissions. Without going into too much detail right now, we are going to modify these so you can read/write your file from your command line.&lt;/p&gt;

&lt;p&gt;Next type &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 755 main.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try checking permissions again, you will see the above line changed them!&lt;/p&gt;

&lt;p&gt;Now let’s make a simpler version of our file without the ‘.rb’ extension. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;mv main.rb questions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lastly let’s go ahead and place an “alias” of your file in your computer’s “bin”. Think of it like putting a shortcut to an application on your computer’s desktop. We are going to make it so you can type “questions” in the command line anywhere and access your questions tracker. Type this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s $PWD/questions /usr/local/bin/&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Now you should be able to access and use your program quickly from anywhere in the CLI! You have a basic understanding of how to build an application for use at your computer’s command line, and you can quickly jot down any questions that come to you in your programming journey!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//2017/01/01/basic-cli-app.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/01/01/basic-cli-app.html</guid>
      </item>
    
  </channel>
</rss>